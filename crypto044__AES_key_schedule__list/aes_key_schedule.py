#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
"""
@author: Lothar Rubusch
@email: L.Rubusch@gmx.ch
@license: GPLv3
@2014-Mar-19


references:
Understanding Cryptography, Christof Paar, Jan Pelzl (c) Springer 2010 [book]

links:
http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
http://en.wikipedia.org/wiki/Rijndael_key_schedule

implementations:
AES implementation by Chris Veness: http://www.movable-type.co.uk/scripts/aes.html
(c) 2005-2008 Chris Veness. Right of free use is granted for all
commercial or non-commercial use. No warranty of any form is offered.

AES implementation, ported to python by Markus Birth
(c) 2009 by Markus Birth <markus@birth-online.de>
"""
import sys

def die(msg):
    print msg
    sys.exit(1)

s_box = [
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
]

r_con = [
    [0x00, 0x00, 0x00, 0x00],
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1b, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]
]

## key expansion
def key_schedule(key, keylength):
    ## input: 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
    Nb = 4
    Nk = keylength / 32 # 4
    Nr = Nk + 6 # 10 round keys
    words = [0] * Nb * (Nr+1)
    temp = [0] * 4

    ## init word with first password
    for idx in range(Nk):
        words[idx] = [key[4*idx], key[4*idx+1], key[4*idx+2], key[4*idx+3]]

    ## words:
    ## 00 01 02 03
    ## 04 05 06 07
    ## 08 09 0a 0b
    ## 0c 0d 0e 0f
    ## 0c 0d 0e 0f
    ## 0d 0e 0f 0c
    for idx in range(Nk, Nb*(Nr+1)): # round 4. -> 44.
        words[idx] = [0] * 4

        ## init temp to the last quadruple
        for t in range(4):
            temp[t] = words[idx-1][t]

        if idx % Nk == 0:
            ## first word block, rotate and substitute
            ## temp: 0c 0d 0e 0f

            ## rotate word
            swap = temp[0]
            for rot in range(3): temp[rot] = temp[rot+1]
            temp[3] = swap
            ## temp: 0d 0e 0f 0c

            ## s-boxing
            for sub in range(4):
                temp[sub] = s_box[temp[sub]]
            ## temp: d7 ab 76 fe

            ## XOR against round coefficient
            for t in range(4): temp[t] ^= r_con[idx/Nk][t]
            ## temp: d6 ab 76 fe

        elif Nk>6 and idx%Nk == 4:
            ## keylength above 128-bit, additional substitutions

            ## s-boxing
            for sub in range(4):
                temp[sub] = s_box[temp[sub]]

        ## assign the preceeding word, XORed against the current temp
        for t in range(4):
            words[idx][t] = words[idx-Nk][t] ^ temp[t]
        ## words[idx]: (...) d6 aa 74 fd (...)
    return words

def _print(key):
    if key < 0x10:
        print "0%x" % key,
    else:
        print "%x" % key,

def key_print(keys):
    print "generated output:"
    for i in range(len(keys)):
        if i%4 == 0 and i != 0: print ""
        for j in range(len(keys[0])):
            _print(keys[i][j])
    print "\n"

def key_preparation(key, keylength):
    key_bytes = []
    for idx in range(keylength/8):
        key_bytes.append( ((key >>(keylength - (idx+1)*8)) & 0xff) )
    return key_bytes


                                                                                
if __name__ == "__main__":
    ## input key
#    key = 0x000102030405060708090a0b0c0d0e0f
#    keylength=128
    
    key = 0x000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f
    keylength=256
    
    print "input key:\n%x\n" % key

    ## input key
    ## 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
    key_bytes = key_preparation(key, keylength)
    keys = key_schedule(key_bytes, keylength)
    ## key schedule
    ## 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
    ## d6 aa 74 fd d2 af 72 fa da a6 78 f1 d6 ab 76 fe
    ## b6 92 cf 0b 64 3d bd f1 be 9b c5 00 68 30 b3 fe
    ## b6 ff 74 4e d2 c2 c9 bf 6c 59 0c bf 04 69 bf 41
    ## 47 f7 f7 bc 95 35 3e 03 f9 6c 32 bc fd 05 8d fd
    ## 3c aa a3 e8 a9 9f 9d eb 50 f3 af 57 ad f6 22 aa
    ## 5e 39 0f 7d f7 a6 92 96 a7 55 3d c1 0a a3 1f 6b
    ## 14 f9 70 1a e3 5f e2 8c 44 0a df 4d 4e a9 c0 26
    ## 47 43 87 35 a4 1c 65 b9 e0 16 ba f4 ae bf 7a d2
    ## 54 99 32 d1 f0 85 57 68 10 93 ed 9c be 2c 97 4e
    ## 13 11 1d 7f e3 94 4a 17 f3 07 a7 8b 4d 2b 30 c5

    ## print result
    key_print(keys)

    print "READY.\n"
