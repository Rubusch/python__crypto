#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
"""
@author: Lothar Rubusch
@email: L.Rubusch@gmx.ch
@license: GPLv3
@2014-Mar-19

byte sequence implementation
"""
import sys

def die(msg):
    print msg
    sys.exit(1)

## S-box
s_box = [[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
         [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
         [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
         [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
         [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
         [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
         [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
         [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
         [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
         [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
         [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
         [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
         [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
         [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
         [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
         [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]]

## round coefficients
r_con = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

def key_schedule(password, keylength):
    ## init, e.g. keylength 128 and password:
    ## 0x000102030405060708090a0b0c0d0e0f
    Nb = 4
    Nk = keylength / 32
    Nr = Nk + 6 # rounds keys
    words = []
    words = [0] * Nb * (Nr+1)
    temp = 0x0

    ## split initial key into four pieces
    ## 0x00010203 0x04050607 0x08090a0b 0x0c0d0e0f
    for idx in range(Nk):
        words[idx] = (password >>(keylength - (idx+1) * 32)) & 0xffffffff

    for idx in range(Nk, Nb*(Nr+1)): # round 4. -> 44. (128-bit)
        words[idx] = 0x0

        ## init temp to the last quadruple
        temp = words[idx-1]

        nextword = 0x0
        if idx % Nk == 0:
            ## first word block, rotate and substitute

            ## rotate word
            swap = (temp >>24) & 0xff
            temp = ((temp <<8) & 0xffffffff)|swap
            ## temp: 0x0d0e0f0c

            ## s-boxing and r-coefficient
            for sub in range(4):
                ## s-boxing
                row = (temp >> (32 - 8*(sub+1) + 4)) & 0xf
                col = (temp >> (32 - 8*(sub+1))) & 0xf
                ch = s_box[row][col]
                ## ch: d7

                ## the 0. char, XOR against round coefficient
                if sub == 0: ch ^= r_con[idx/Nk -1]
                ## ch: d7

                ## append new character
                nextword = (nextword<<8) | ch
                ## swap: d6

            temp = nextword
            ## temp: 0xd6ab76fe

        elif Nk > 6 and idx % Nk == 4:
            ## keylength above 128-bit, additional substitutions
            for sub in range(4):
                ## s-boxing
                row = (temp >> (32 - 8*(sub+1) + 4)) & 0xf
                col = (temp >> (32 - 8*(sub+1))) & 0xf
                ch = s_box[row][col]

                ## append new character
                nextword = (nextword<<8) | ch

            temp = nextword
            ## temp: 0xd6ab76fe

        ## assign the preceeding word, XORed against the current temp
        words[idx] = words[idx-Nk] ^ temp
    return words

def key_print(keys, ncols=4):
    print "generated output:"
    for k in range(len(keys)):
        if k % 4 == 0 and k != 0: print ""
        sz = "%x" % keys[k]
        if len(sz) < 8:
            for d in range(8 - len(sz)):
                sz = '0' + sz
        print "%s" % sz,
    print "\n"


if __name__ == "__main__":
    ## input key
    key = 0x000102030405060708090a0b0c0d0e0f
    keylength = 128

    ## try another key length
#    key = 0x000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f
#    keylength = 256

    print "input key:\n%x\n" % key

    ## input key
    ## 000102030405060708090a0b0c0d0e0f
    keys = key_schedule(key, keylength)
    ## key schedule
    ## 00010203 04050607 08090a0b 0c0d0e0f
    ## d6aa74fd d2af72fa daa678f1 d6ab76fe
    ## b692cf0b 643dbdf1 be9bc500 6830b3fe
    ## b6ff744e d2c2c9bf 6c590cbf 0469bf41
    ## 47f7f7bc 95353e03 f96c32bc fd058dfd
    ## 3caaa3e8 a99f9deb 50f3af57 adf622aa
    ## 5e390f7d f7a69296 a7553dc1 0aa31f6b
    ## 14f9701a e35fe28c 440adf4d 4ea9c026
    ## 47438735 a41c65b9 e016baf4 aebf7ad2
    ## 549932d1 f0855768 1093ed9c be2c974e
    ## 13111d7f e3944a17 f307a78b 4d2b30c5

    ## print result
    key_print(keys)

    print "READY.\n"
